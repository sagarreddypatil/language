name ::= [^ \t\n(){},;_]+                    // variable name

type ::= name                                // name of type, data, or alias
type ::= type -> type                        // function type

mtype ::= ':' type                           // mandatory type annotation
otype ::= (mtype)?                           // optional type annotation

cons ::= name                                // type constructor, no values
cons ::= name '(' type (',' type)* ')'       // tagged values

inst ::= 'data' name '=' (cons)('|' cons)*   // ADT
alias ::= 'type' name '=' name               // type alias

expr ::= let ptrn '=' simp (';'|'\n') expr   // binding
expr ::= simp                                // idk man

bop ::= '+' | '-' | '*' | '/' | '%'
uop ::= '-' | '~'

atom ::= <all inbuilt literals>              // char, Bool, Int, float
                                             // list, string, tuple, Unit

atom ::= name                                // variable reference
atom ::= atom '(' simp (',' simp)* ')'       // function call

atom ::= name                                // data constructor no values
atom ::= name '(' simp (',' simp)* ')'       // data constructor

atom ::= '(' simp ')'                        // parens

uatom ::= [uop] atom                         // unary operator application

simp ::= uatom [bop simp]*                   // binary operator application
simp ::= 'match' simp [ptrn ':' simp]+       // pattern matching
simp ::= fn([name otype ',']+) otype simp    // lambda

simp ::= { expr }                            // block

====

data Maybe = Some(Int) | None

let div = fn(a, b)
    match b {
        0: None
        _: Some(a / b)
    }

let gcd = fn(a, b) match b {
    0 : a
    _ : gcd(b, a % b)
}

gcd(10, 5)