data List = Cons(Int, List) | Nil

fn sorted(list) = match list
    | Nil => true
    | Cons(_, Nil) => true
    | Cons(x, Cons(y, rest)) => if x <= y
        sorted(Cons(y, rest))
        else false

// test comment
fn bubble(list) = match list
    | Nil => Nil
    | Cons(x, Nil) => Cons(x, Nil)
    | Cons(x, Cons(y, rest)) => match x <= y
        | true => Cons(x, bubble(Cons(y, rest)))
        | false => Cons(y, bubble(Cons(x, rest)))

fn sort(list) = match sorted(list)
    | true  => list | false => sort(bubble(list))

fn append(list1, list2) = match list1
    | Nil => list2
    | Cons(x, rest) => Cons(x, append(rest, list2))

fn reverse(list) = match list
    | Nil => Nil
    | Cons(x, rest) => append(reverse(rest), Cons(x, Nil))

let list = Cons(4, Cons(5, Cons(1, Cons(2, Cons(3, Nil)))))
reverse(sort((list)))